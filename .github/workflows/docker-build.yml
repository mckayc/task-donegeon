# .github/workflows/docker-build.yml

# Gives the workflow a name, which is displayed in the "Actions" tab of your GitHub repository.
name: Docker Build and Push

# Specifies the trigger for this workflow. In this case, it runs on every 'push' to the 'main' branch.
on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: mckayc/task-donegeon        

# Defines the jobs that will run as part of the workflow.
jobs:
  # This workflow contains a single job called "build-and-push".
  build-and-push:
    # Specifies the type of virtual machine to run the job on. 'ubuntu-latest' is a standard, reliable choice.
    runs-on: ubuntu-latest

    # A job is a sequence of steps. The virtual machine executes these steps in order.
    steps:
      # Step 1: Check out your repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      # This uses an official action from Docker to securely log in to the Docker Hub container registry.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # The username for Docker Hub. We use a secret to avoid hardcoding it in the file.
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          # The password or access token for Docker Hub, also stored securely as a secret.
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build and push the Frontend Docker image
      # This is the core step for the frontend service. It builds the image and pushes it to Docker Hub.
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          # 'context' tells Docker where to find the files for the build, including the Dockerfile.
          context: ./frontend
          # 'file' explicitly specifies the path to the Dockerfile.
          file: ./frontend/Dockerfile
          # 'push: true' tells the action to push the image to the registry after a successful build.
          push: true
          # 'tags' defines the name and tag for the Docker image.
          # It uses your Docker Hub username from secrets to create a tag like 'your-username/task-donegeon-frontend:latest'.
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/task-donegeon-frontend:latest

      # Step 4: Build and push the Backend Docker image
      # This step is identical to the one above, but configured for the backend service.
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          # The context is now the 'backend' directory.
          context: ./backend
          # It uses the Dockerfile located in the 'backend' directory.
          file: ./backend/Dockerfile
          # Push the image after building.
          push: true
          # Tags the image as 'your-username/task-donegeon-backend:latest'.
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/task-donegeon-backend:latest
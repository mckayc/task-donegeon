# docker-compose.prod.yml
# Use this file for deploying the pre-built image from Docker Hub.
# Run with: docker-compose -f docker-compose.prod.yml up -d

services:
  app:
    image: mckayc/task-donegeon:latest  # Pulls the specified image from Docker Hub
    restart: always
    ports:
      - "3002:3001"
    depends_on:
      db:
        condition: service_healthy
    environment:
      # These environment variables must be set on the host machine or in a .env file
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - NODE_ENV=production
      - API_KEY=${API_KEY}
      - STORAGE_PROVIDER=${STORAGE_PROVIDER}
      # If using Supabase for storage in production, uncomment and set these:
      # - SUPABASE_URL=${SUPABASE_URL}
      # - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    networks:
      - donegeon_network
    volumes:
      # IMPORTANT: We DO NOT mount the source code here.
      # We only mount the 'uploads' directory to persist user-uploaded files.
      - ./uploads:/app/uploads

  db:
    image: postgres:15-alpine
    restart: always
    ports:
      - "5433:5432" # Maps the host port 5433 to the container's port 5432
    environment:
      # These environment variables must be set on the host machine or in a .env file
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persists database data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - donegeon_network

volumes:
  postgres_data: # Defines a named volume for the database

networks:
  donegeon_network:
    driver: bridge
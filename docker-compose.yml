# This is your primary docker-compose file for LOCAL DEVELOPMENT.
# It builds the app image locally and mounts your source code for live changes.
# Run with: docker-compose up --build -d

services:
  app:
    # Builds the Docker image using the Dockerfile in the current directory.
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-donegeon-app-dev
    restart: unless-stopped
    # Maps port 3002 on your machine to port 3001 inside the container.
    ports:
      - "3002:3001"
    # Ensures the database container is healthy before starting the app.
    depends_on:
      db:
        condition: service_healthy
    # Passes environment variables to the application.
    # These should be defined in a local .env file.
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - NODE_ENV=${NODE_ENV}
      - API_KEY=${API_KEY}
      - STORAGE_PROVIDER=${STORAGE_PROVIDER}
    # Defines the network for communication between containers.
    networks:
      - donegeon_network
    # Sets up volumes for data persistence and live-reloading.
    volumes:
      # Mounts the current directory into the container for live code changes.
      - .:/app
      # Prevents the local node_modules from overwriting the container's.
      - /app/node_modules
      # Persists uploaded files from the container's /app/uploads to a local ./uploads folder.
      - ./uploads:/app/uploads

  db:
    # Uses the official PostgreSQL 15 image.
    image: postgres:15-alpine
    container_name: task-donegeon-db-dev
    restart: unless-stopped
    # Maps port 5433 on your machine to port 5432 in the container to avoid conflicts.
    ports:
      - "5433:5432"
    # Configures the database using variables from your .env file.
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    # Persists the database data in a named volume.
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Checks if the database is ready to accept connections.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - donegeon_network

# Defines the named volume for database persistence.
volumes:
  postgres_data:

# Defines the custom bridge network for the services.
networks:
  donegeon_network:
    driver: bridge